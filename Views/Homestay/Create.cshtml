@using WebHSPromotionType = WebHS.Models.PromotionType
@model WebHS.ViewModels.CreateHomestayViewModel

@{
    ViewData["Title"] = "T·∫°o Homestay";
    Layout = "~/Views/Shared/_Layout_New.cshtml";
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-10">
            <div class="card">
                <div class="card-header">
                    <h4 class="mb-0">T·∫°o Homestay M·ªõi</h4>
                    <p class="text-muted mb-0">Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªÉ t·∫°o homestay c·ªßa b·∫°n</p>
                </div>
                <div class="card-body">
                    <form asp-action="Create" method="post" enctype="multipart/form-data" id="homestayForm">
                        <!-- Basic Information -->
                        <div class="mb-4">
                            <h5 class="text-primary border-bottom pb-2">Th√¥ng tin c∆° b·∫£n</h5>
                            
                            <div class="row">
                                <div class="col-md-8">
                                    <div class="form-group">
                                        <label asp-for="Name" class="form-label">T√™n homestay *</label>
                                        <input asp-for="Name" class="form-control" placeholder="Nh·∫≠p t√™n homestay">
                                        <span asp-validation-for="Name" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label asp-for="PricePerNight" class="form-label">Gi√° m·ªói ƒë√™m (VNƒê) *</label>
                                        <input asp-for="PricePerNight" type="number" class="form-control" placeholder="0" min="0" step="1000">
                                        <span asp-validation-for="PricePerNight" class="text-danger"></span>
                                    </div>
                                </div>
                            </div>

                            <div class="form-group">
                                <label asp-for="Description" class="form-label">M√¥ t·∫£ *</label>
                                <textarea asp-for="Description" class="form-control" rows="4" placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ homestay c·ªßa b·∫°n"></textarea>
                                <span asp-validation-for="Description" class="text-danger"></span>
                            </div>
                        </div>

                        <!-- Location Information -->
                        <div class="mb-4">
                            <h5 class="text-primary border-bottom pb-2">Th√¥ng tin ƒë·ªãa ƒëi·ªÉm</h5>
                            
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label class="form-label">S·ªë nh√† *</label>
                                        <input type="text" id="houseNumber" class="form-control" 
                                               placeholder="123, 45A, 67/8..." 
                                               title="Nh·∫≠p s·ªë nh√†, c√≥ th·ªÉ bao g·ªìm ch·ªØ c√°i v√† d·∫•u g·∫°ch ch√©o (VD: 123A, 45/7)">
                                        <small class="form-text text-muted">VD: 123, 45A, 67/8, 12B</small>
                                    </div>
                                </div>
                                <div class="col-md-8">
                                    <div class="form-group">
                                        <label asp-for="Address" class="form-label">T√™n ƒë∆∞·ªùng *</label>
                                        <input asp-for="Address" class="form-control" 
                                               placeholder="T√™n ƒë∆∞·ªùng, ph·ªë"
                                               title="Nh·∫≠p t√™n ƒë∆∞·ªùng, ph·ªë (VD: Nguy·ªÖn Hu·ªá, L√™ L·ª£i)">
                                        <span asp-validation-for="Address" class="text-danger"></span>
                                        <small class="form-text text-muted">Ch·ªâ nh·∫≠p t√™n ƒë∆∞·ªùng, kh√¥ng bao g·ªìm s·ªë nh√†</small>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label asp-for="Country" class="form-label">Qu·ªëc gia *</label>
                                        <input asp-for="Country" class="form-control" value="Vietnam" readonly>
                                        <span asp-validation-for="Country" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label asp-for="City" class="form-label">T·ªânh/Th√†nh ph·ªë *</label>
                                        <select id="provinceSelect" class="form-control">
                                            <option value="">-- Ch·ªçn t·ªânh/th√†nh ph·ªë --</option>
                                        </select>
                                        <input asp-for="City" type="hidden" id="provinceName" />
                                        <span asp-validation-for="City" class="text-danger"></span>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label asp-for="District" class="form-label">Qu·∫≠n/Huy·ªán *</label>
                                        <select id="districtSelect" class="form-control" disabled>
                                            <option value="">-- Ch·ªçn qu·∫≠n/huy·ªán --</option>
                                        </select>
                                        <input asp-for="District" type="hidden" id="districtName" />
                                        <span asp-validation-for="District" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label asp-for="Ward" class="form-label">Ph∆∞·ªùng/X√£ *</label>
                                        <select id="wardSelect" class="form-control" disabled>
                                            <option value="">-- Ch·ªçn ph∆∞·ªùng/x√£ --</option>
                                        </select>
                                        <input asp-for="Ward" type="hidden" id="wardName" />
                                        <span asp-validation-for="Ward" class="text-danger"></span>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label asp-for="ZipCode" class="form-label">M√£ b∆∞u ƒëi·ªán *</label>
                                        <input asp-for="ZipCode" class="form-control" placeholder="M√£ b∆∞u ƒëi·ªán">
                                        <span asp-validation-for="ZipCode" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label asp-for="State" class="form-label">Khu v·ª±c</label>
                                        <input asp-for="State" class="form-control" readonly placeholder="T·ª± ƒë·ªông x√°c ƒë·ªãnh">
                                        <span asp-validation-for="State" class="text-danger"></span>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label asp-for="Latitude" class="form-label">Vƒ© ƒë·ªô</label>
                                        <input asp-for="Latitude" type="number" class="form-control" placeholder="0" step="any" readonly>
                                        <span asp-validation-for="Latitude" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label asp-for="Longitude" class="form-label">Kinh ƒë·ªô</label>
                                        <input asp-for="Longitude" type="number" class="form-control" placeholder="0" step="any" readonly>
                                        <span asp-validation-for="Longitude" class="text-danger"></span>
                                    </div>
                                </div>
                            </div>

                            <!-- Enhanced Map Container -->
                            <div class="form-group">
                                <label class="form-label">üìç Ch·ªçn v·ªã tr√≠ tr√™n b·∫£n ƒë·ªì</label>
                                
                                <!-- Enhanced Map Controls -->
                                <div class="map-controls mb-3">
                                    <div class="row">
                                        <div class="col-md-8">
                                            <div class="input-group">
                                                <input type="text" id="fullAddressSearch" class="form-control" 
                                                       placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß ƒë·ªÉ t√¨m ki·∫øm...">
                                                <button type="button" id="geocodeBtn" class="btn btn-primary">
                                                    üîç T√¨m tr√™n b·∫£n ƒë·ªì
                                                </button>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="btn-group w-100" role="group">
                                                <button type="button" id="currentLocationBtn" class="btn btn-outline-success">
                                                    üì± V·ªã tr√≠ hi·ªán t·∫°i
                                                </button>
                                                <button type="button" id="resetMapBtn" class="btn btn-outline-secondary">
                                                    üîÑ ƒê·∫∑t l·∫°i
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Address Display -->
                                <div id="addressDisplay" class="alert alert-info" style="display: none;">
                                    <i class="fas fa-map-marker-alt"></i> <span id="displayText"></span>
                                </div>
                                
                                <div class="map-container">
                                    <div id="map"></div>
                                </div>
                                
                                <div class="mt-2">
                                    <small class="form-text text-muted">
                                        üí° <strong>C√°ch s·ª≠ d·ª•ng:</strong><br>
                                        ‚Ä¢ <strong>Nh·∫≠p ƒë·ªãa ch·ªâ:</strong> G√µ ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß v√† nh·∫•n "T√¨m tr√™n b·∫£n ƒë·ªì"<br>
                                        ‚Ä¢ <strong>Click b·∫£n ƒë·ªì:</strong> Click v√†o v·ªã tr√≠ mu·ªën ƒë·∫∑t homestay<br>
                                        ‚Ä¢ <strong>V·ªã tr√≠ hi·ªán t·∫°i:</strong> Nh·∫•n "V·ªã tr√≠ hi·ªán t·∫°i" ƒë·ªÉ d√πng GPS<br>
                                        ‚Ä¢ <strong>K√©o marker:</strong> K√©o th·∫£ ƒë·ªÉ ƒëi·ªÅu ch·ªânh v·ªã tr√≠ ch√≠nh x√°c
                                    </small>
                                </div>
                            </div>
                        </div>

                        <!-- Property Details -->
                        <div class="mb-4">
                            <h5 class="text-primary border-bottom pb-2">Chi ti·∫øt ph√≤ng</h5>
                            
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label asp-for="MaxGuests" class="form-label">S·ªë kh√°ch t·ªëi ƒëa *</label>
                                        <input asp-for="MaxGuests" type="number" class="form-control" placeholder="1" min="1" max="50">
                                        <span asp-validation-for="MaxGuests" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label asp-for="Bedrooms" class="form-label">S·ªë ph√≤ng ng·ªß *</label>
                                        <input asp-for="Bedrooms" type="number" class="form-control" placeholder="1" min="1" max="20">
                                        <span asp-validation-for="Bedrooms" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label asp-for="Bathrooms" class="form-label">S·ªë ph√≤ng t·∫Øm *</label>
                                        <input asp-for="Bathrooms" type="number" class="form-control" placeholder="1" min="1" max="20">
                                        <span asp-validation-for="Bathrooms" class="text-danger"></span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Amenities -->
                        <div class="mb-4">
                            <h5 class="text-primary border-bottom pb-2">Ti·ªán nghi</h5>
                            
                            @if (ViewBag.Amenities != null)
                            {
                                <div class="row">
                                    @foreach (var amenity in (List<WebHS.Models.Amenity>)ViewBag.Amenities)
                                    {
                                        <div class="col-md-6 col-lg-4 mb-3">
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" name="AmenityIds" value="@amenity.Id" id="amenity_@amenity.Id">
                                                <label class="form-check-label" for="amenity_@amenity.Id">
                                                    @if (!string.IsNullOrEmpty(amenity.Icon))
                                                    {
                                                        <i class="@amenity.Icon me-2"></i>
                                                    }
                                                    @amenity.Name
                                                </label>
                                                @if (!string.IsNullOrEmpty(amenity.Description))
                                                {
                                                    <small class="text-muted d-block">@amenity.Description</small>
                                                }
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        </div>

                        <!-- Images -->
                        <div class="mb-4">
                            <h5 class="text-primary border-bottom pb-2">H√¨nh ·∫£nh</h5>
                            
                            <div class="form-group">
                                <label asp-for="Images" class="form-label">Ch·ªçn h√¨nh ·∫£nh *</label>
                                <input asp-for="Images" type="file" class="form-control" multiple accept="image/*">
                                <span asp-validation-for="Images" class="text-danger"></span>
                                <small class="form-text text-muted">
                                    Ch·ªçn nhi·ªÅu h√¨nh ·∫£nh ƒë·ªÉ showcase homestay c·ªßa b·∫°n. H√¨nh ƒë·∫ßu ti√™n s·∫Ω ƒë∆∞·ª£c ƒë·∫∑t l√†m h√¨nh ch√≠nh.
                                </small>
                            </div>

                            <!-- Image Preview Area -->
                            <div id="imagePreview" class="row mt-3" style="display: none;">
                                <div class="col-12">
                                    <h6>Xem tr∆∞·ªõc h√¨nh ·∫£nh:</h6>
                                    <div id="previewContainer" class="d-flex flex-wrap gap-2"></div>
                                </div>
                            </div>
                        </div>

                        <!-- Submit Buttons -->
                        <div class="form-group text-center">
                            <button type="submit" class="btn btn-primary btn-lg me-3">
                                <i class="fas fa-save"></i> T·∫°o Homestay
                            </button>
                            <a href="@Url.Action("Dashboard", "Host")" class="btn btn-secondary btn-lg">
                                <i class="fas fa-times"></i> H·ªßy
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Leaflet JS -->
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    
    <script>
        $(document).ready(function() {
            // Note: Initialize address form after all functions are defined
            // initializeAddressForm(); // Moved to bottom of script
            
            // Cascading dropdown functionality is now handled by initializeAddressForm()
            // ...existing code...            // Note: Old event handlers commented out - using new addressService handlers instead
            /*
            $('#countrySelect').on('change', function() {
                var countryId = $(this).val();
                var countryText = $(this).find('option:selected').text();
                $('#countryName').val(countryText);
                
                // Clear and disable dependent dropdowns
                clearAndDisableSelect('#provinceSelect', '-- Ch·ªçn t·ªânh/th√†nh ph·ªë --');
                clearAndDisableSelect('#districtSelect', '-- Ch·ªçn qu·∫≠n/huy·ªán --');
                clearAndDisableSelect('#wardSelect', '-- Ch·ªçn ph∆∞·ªùng/x√£ --');
                
                if (countryId) {
                    loadProvinces(countryId);
                }
            });
            
            $('#provinceSelect').on('change', function() {
                var provinceId = $(this).val();
                var provinceText = $(this).find('option:selected').text();
                $('#provinceName').val(provinceText);
                $('#stateName').val(getRegionFromProvince(provinceText));
                
                // Clear and disable dependent dropdowns
                clearAndDisableSelect('#districtSelect', '-- Ch·ªçn qu·∫≠n/huy·ªán --');
                clearAndDisableSelect('#wardSelect', '-- Ch·ªçn ph∆∞·ªùng/x√£ --');
                
                if (provinceId) {
                    loadDistricts(provinceId);
                }
            });

            $('#districtSelect').on('change', function() {
                var districtId = $(this).val();
                var districtText = $(this).find('option:selected').text();
                $('#districtName').val(districtText);
                
                // Clear and disable dependent dropdown
                clearAndDisableSelect('#wardSelect', '-- Ch·ªçn ph∆∞·ªùng/x√£ --');
                
                if (districtId) {
                    loadWards(districtId);
                }
            });

            $('#wardSelect').on('change', function() {
                var wardText = $(this).find('option:selected').text();
                $('#wardName').val(wardText);
            });
            */
            
            // Functions for loading data - OLD VERSION (commented out)
            /*
            function loadCountries() {
                $.get('/api/address/countries')
                    .done(function(data) {
                        var select = $('#countrySelect');
                        select.empty().append('<option value="">-- Ch·ªçn qu·ªëc gia --</option>');
                        
                        $.each(data, function(index, country) {
                            var option = $('<option></option>')
                                .attr('value', country.id)
                                .text(country.name);
                            select.append(option);
                        });
                        
                        // Auto-select Vietnam if available
                        var vietnamOption = select.find('option:contains("Vietnam")');
                        if (vietnamOption.length > 0) {
                            vietnamOption.prop('selected', true);
                            $('#countrySelect').trigger('change');
                        }
                    })
                    .fail(function() {
                        console.error('Failed to load countries');
                    });
            }
            */
            
            /* OLD API FUNCTIONS - COMMENTED OUT (now using Vietnamese external API)
            function loadProvinces(countryId) {
                $('#provinceSelect').prop('disabled', true);
                
                $.get('/api/address/provinces/' + countryId)
                    .done(function(data) {
                        var select = $('#provinceSelect');
                        select.empty().append('<option value="">-- Ch·ªçn t·ªânh/th√†nh ph·ªë --</option>');
                        
                        $.each(data, function(index, province) {
                            var option = $('<option></option>')
                                .attr('value', province.id)
                                .text(province.name);
                            select.append(option);
                        });
                        
                        select.prop('disabled', false);
                    })
                    .fail(function() {
                        console.error('Failed to load provinces');
                        $('#provinceSelect').prop('disabled', false);
                    });
            }
            
            function loadDistricts(provinceId) {
                $('#districtSelect').prop('disabled', true);
                
                $.get('/api/address/districts/' + provinceId)
                    .done(function(data) {
                        var select = $('#districtSelect');
                        select.empty().append('<option value="">-- Ch·ªçn qu·∫≠n/huy·ªán --</option>');
                        
                        $.each(data, function(index, district) {
                            var option = $('<option></option>')
                                .attr('value', district.id)
                                .text(district.name);
                            select.append(option);
                        });
                        
                        select.prop('disabled', false);
                    })
                    .fail(function() {
                        console.error('Failed to load districts');
                        $('#districtSelect').prop('disabled', false);
                    });
            }
            
            function loadWards(districtId) {
                $('#wardSelect').prop('disabled', true);
                
                $.get('/api/address/wards/' + districtId)
                    .done(function(data) {
                        var select = $('#wardSelect');
                        select.empty().append('<option value="">-- Ch·ªçn ph∆∞·ªùng/x√£ --</option>');
                        
                        $.each(data, function(index, ward) {
                            var option = $('<option></option>')
                                .attr('value', ward.id)
                                .text(ward.name);
                            select.append(option);
                        });
                        
                        select.prop('disabled', false);
                    })
                    .fail(function() {
                        console.error('Failed to load wards');
                        $('#wardSelect').prop('disabled', false);
                    });
            }
            
            function clearAndDisableSelect(selector, placeholder) {
                var select = $(selector);
                select.empty().append('<option value="">' + placeholder + '</option>');
                select.prop('disabled', true);
            }
            */
            
            // Re-enable clearAndDisableSelect function for compatibility
            function clearAndDisableSelect(selector, placeholder) {
                var select = $(selector);
                select.empty().append('<option value="">' + placeholder + '</option>');
                select.prop('disabled', true);
            }
            
            function getRegionFromProvince(provinceName) {
                // Simple mapping of provinces to regions
                var northProvinces = ['H√† N·ªôi', 'H·∫£i Ph√≤ng', 'Qu·∫£ng Ninh', 'B·∫Øc Giang', 'B·∫Øc Ninh', 'H·∫£i D∆∞∆°ng', 'H∆∞ng Y√™n', 'Th√°i B√¨nh', 'Nam ƒê·ªãnh', 'Ninh B√¨nh', 'Vƒ©nh Ph√∫c', 'H√† Nam', 'H√≤a B√¨nh', 'S∆°n La', 'ƒêi·ªán Bi√™n', 'Lai Ch√¢u', 'L√†o Cai', 'Y√™n B√°i', 'Ph√∫ Th·ªç', 'Tuy√™n Quang', 'H√† Giang', 'Cao B·∫±ng', 'B·∫Øc K·∫°n', 'L·∫°ng S∆°n', 'Th√°i Nguy√™n'];
                var centralProvinces = ['Thanh H√≥a', 'Ngh·ªá An', 'H√† Tƒ©nh', 'Qu·∫£ng B√¨nh', 'Qu·∫£ng Tr·ªã', 'Th·ª´a Thi√™n Hu·∫ø', 'ƒê√† N·∫µng', 'Qu·∫£ng Nam', 'Qu·∫£ng Ng√£i', 'B√¨nh ƒê·ªãnh', 'Ph√∫ Y√™n', 'Kh√°nh H√≤a', 'Ninh Thu·∫≠n', 'B√¨nh Thu·∫≠n', 'Kon Tum', 'Gia Lai', 'ƒê·∫Øk L·∫Øk', 'ƒê·∫Øk N√¥ng', 'L√¢m ƒê·ªìng'];
                
                if (northProvinces.some(p => provinceName.includes(p))) {
                    return 'Mi·ªÅn B·∫Øc';
                } else if (centralProvinces.some(p => provinceName.includes(p))) {
                    return 'Mi·ªÅn Trung';
                } else {
                    return 'Mi·ªÅn Nam';
                }
            }

            // Image preview functionality
            $('#Images').on('change', function() {
                var files = this.files;
                var previewContainer = $('#previewContainer');
                var imagePreview = $('#imagePreview');
                
                previewContainer.empty();
                
                if (files.length > 0) {
                    imagePreview.show();
                    
                    for (var i = 0; i < files.length; i++) {
                        var file = files[i];
                        var reader = new FileReader();
                        
                        reader.onload = function(e) {
                            var imgDiv = $('<div class="position-relative" style="width: 150px; height: 100px;">');
                            var img = $('<img class="img-thumbnail w-100 h-100" style="object-fit: cover;">');
                            img.attr('src', e.target.result);
                            imgDiv.append(img);
                            previewContainer.append(imgDiv);
                        };
                        
                        reader.readAsDataURL(file);
                    }
                } else {
                    imagePreview.hide();
                }
            });

            // Format price input
            $('#PricePerNight').on('input', function() {
                var value = $(this).val().replace(/[^0-9]/g, '');
                $(this).val(value);
            });

            // Auto-fill coordinates based on address (simple implementation)
            $('#Address, #wardSelect').on('blur change', function() {
                var address = $('#Address').val();
                var ward = $('#wardName').val();
                var district = $('#districtName').val();
                var city = $('#provinceName').val();
                
                if (address && ward && district && city) {
                    // Auto-geocoding functionality
                    $.ajax({
                        url: '@Url.Action("GeocodeAddress", "Homestay")',
                        type: 'POST',
                        data: {
                            address: address + ', ' + ward + ', ' + district,
                            city: city,
                            state: $('#stateName').val()
                        },
                        success: function(response) {
                            if (response.success) {
                                $('#Latitude').val(response.latitude);
                                $('#Longitude').val(response.longitude);
                                console.log('Auto-filled coordinates:', response.latitude, response.longitude);
                            } else {
                                console.log('Could not geocode address:', response.message);
                            }
                        },
                        error: function() {
                            console.log('Error calling geocoding service');
                        }
                    });
                }
            });

            // Enhanced image preview with file validation
            $('#Images').on('change', function() {
                var files = this.files;
                var previewContainer = $('#previewContainer');
                var imagePreview = $('#imagePreview');
                
                previewContainer.empty();
                
                if (files.length > 0) {
                    imagePreview.show();
                    
                    // Validate total file count
                    if (files.length > 10) {
                        alert('B·∫°n ch·ªâ c√≥ th·ªÉ t·∫£i l√™n t·ªëi ƒëa 10 h√¨nh ·∫£nh');
                        $(this).val('');
                        imagePreview.hide();
                        return;
                    }
                    
                    for (var i = 0; i < files.length; i++) {
                        var file = files[i];
                        
                        // Validate file size (5MB)
                        if (file.size > 5 * 1024 * 1024) {
                            alert('File "' + file.name + '" qu√° l·ªõn. K√≠ch th∆∞·ªõc t·ªëi ƒëa cho ph√©p l√† 5MB');
                            $(this).val('');
                            imagePreview.hide();
                            return;
                        }
                        
                        // Validate file type
                        var allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
                        if (!allowedTypes.includes(file.type)) {
                            alert('File "' + file.name + '" kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng. Ch·ªâ ch·∫•p nh·∫≠n: JPG, PNG, GIF, WebP');
                            $(this).val('');
                            imagePreview.hide();
                            return;
                        }
                        
                        var reader = new FileReader();
                        
                        reader.onload = function(e) {
                            var imgDiv = $('<div class="position-relative" style="width: 150px; height: 100px;">');
                            var img = $('<img class="img-thumbnail w-100 h-100" style="object-fit: cover;">');
                            img.attr('src', e.target.result);
                            imgDiv.append(img);
                            previewContainer.append(imgDiv);
                        };
                        
                        reader.readAsDataURL(file);
                    }
                } else {
                    imagePreview.hide();
                }
            });

            // Real-time form validation
            $('form').on('submit', function(e) {
                var isValid = true;
                var errorMessages = [];

                // Validate required fields
                $('input[required], textarea[required], select[required]').each(function() {
                    if (!$(this).val() || $(this).val().trim() === '') {
                        isValid = false;
                        $(this).addClass('is-invalid');
                        errorMessages.push('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc');
                    } else {
                        $(this).removeClass('is-invalid');
                    }
                });

                // Validate price
                var price = parseInt($('#PricePerNight').val());
                if (price < 50000) {
                    isValid = false;
                    $('#PricePerNight').addClass('is-invalid');
                    errorMessages.push('Gi√° ph√≤ng ph·∫£i t·ª´ 50,000 VND tr·ªü l√™n');
                }

                // Validate guests capacity
                var maxGuests = parseInt($('#MaxGuests').val());
                if (maxGuests < 1 || maxGuests > 20) {
                    isValid = false;
                    $('#MaxGuests').addClass('is-invalid');
                    errorMessages.push('S·ªë l∆∞·ª£ng kh√°ch ph·∫£i t·ª´ 1 ƒë·∫øn 20 ng∆∞·ªùi');
                }

                // Validate coordinates
                var lat = parseFloat($('#Latitude').val());
                var lng = parseFloat($('#Longitude').val());
                if (isNaN(lat) || isNaN(lng) || lat < -90 || lat > 90 || lng < -180 || lng > 180) {
                    isValid = false;
                    errorMessages.push('T·ªça ƒë·ªô kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë·ªãa ch·ªâ');
                }

                if (!isValid) {
                    e.preventDefault();
                    alert(errorMessages.join('\n'));
                    return false;
                }

                // Show loading state
                $(this).find('button[type="submit"]').prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> ƒêang t·∫°o...');
            });
            
            // External Address API Service
            class ExternalAddressService {
                constructor() {
                    this.baseUrl = 'https://provinces.open-api.vn/api';
                    this.cache = new Map();
                }

                async getProvinces() {
                    const cacheKey = 'provinces';
                    if (this.cache.has(cacheKey)) {
                        console.log('üì¶ Loading provinces from cache');
                        return this.cache.get(cacheKey);
                    }

                    try {
                        console.log(`üì° Fetching provinces from: ${this.baseUrl}/p/`);
                        const response = await fetch(`${this.baseUrl}/p/`);
                        
                        console.log('üìä API Response Status:', response.status, response.statusText);
                        console.log('üìÑ Response Headers:', response.headers);
                        
                        const data = await response.json();
                        
                        console.log('üîç Raw API Response (first 3 items):');
                        console.log(JSON.stringify(data.slice(0, 3), null, 2));
                        console.log('üìä Total items received:', data.length);
                        console.log('üèóÔ∏è Response structure analysis:');
                        if (data.length > 0) {
                            console.log('Sample item keys:', Object.keys(data[0]));
                            console.log('Sample item:', data[0]);
                        }
                        
                        const provinces = data.map(p => {
                            console.log(`Processing province: code=${p.code}, name="${p.name}"`);
                            return {
                                code: p.code, // Keep as number
                                name: p.name,
                                // Log all available properties for debugging
                                _debug: {
                                    originalData: p,
                                    allKeys: Object.keys(p)
                                }
                            };
                        });

                        console.log('‚úÖ Processed provinces (first 3):');
                        console.table(provinces.slice(0, 3));
                        
                        this.cache.set(cacheKey, provinces);
                        return provinces;
                    } catch (error) {
                        console.error('‚ùå Error loading provinces:', error);
                        console.error('Error stack:', error.stack);
                        console.error('Error details:', {
                            name: error.name,
                            message: error.message,
                            url: `${this.baseUrl}/p/`
                        });
                        return [];
                    }
                }

                async getDistricts(provinceCode) {
                    const cacheKey = `districts_${provinceCode}`;
                    if (this.cache.has(cacheKey)) {
                        console.log(`üì¶ Loading districts for province ${provinceCode} from cache`);
                        return this.cache.get(cacheKey);
                    }

                    try {
                        const url = `${this.baseUrl}/p/${provinceCode}?depth=2`;
                        console.log(`üì° Fetching districts from: ${url}`);
                        
                        const response = await fetch(url);
                        console.log('üìä Districts API Response Status:', response.status, response.statusText);
                        
                        const data = await response.json();
                        
                        console.log('üîç Districts Raw API Response:');
                        console.log(JSON.stringify(data, null, 2));
                        
                        const districts = data.districts ? data.districts.map(d => {
                            console.log(`Processing district: code=${d.code}, name="${d.name}"`);
                            return {
                                code: d.code, // Keep as number
                                name: d.name,
                                _debug: {
                                    originalData: d,
                                    allKeys: Object.keys(d)
                                }
                            };
                        }) : [];

                        console.log(`‚úÖ Processed ${districts.length} districts for province ${provinceCode}`);
                        console.table(districts.slice(0, 5));

                        this.cache.set(cacheKey, districts);
                        return districts;
                    } catch (error) {
                        console.error(`‚ùå Error loading districts for province ${provinceCode}:`, error);
                        console.error('Error details:', {
                            name: error.name,
                            message: error.message,
                            url: `${this.baseUrl}/p/${provinceCode}?depth=2`
                        });
                        return [];
                    }
                }

                async getWards(districtCode) {
                    const cacheKey = `wards_${districtCode}`;
                    if (this.cache.has(cacheKey)) {
                        console.log(`üì¶ Loading wards for district ${districtCode} from cache`);
                        return this.cache.get(cacheKey);
                    }

                    try {
                        const url = `${this.baseUrl}/d/${districtCode}?depth=2`;
                        console.log(`üì° Fetching wards from: ${url}`);
                        
                        const response = await fetch(url);
                        console.log('üìä Wards API Response Status:', response.status, response.statusText);
                        
                        const data = await response.json();
                        
                        console.log('üîç Wards Raw API Response:');
                        console.log(JSON.stringify(data, null, 2));
                        
                        const wards = data.wards ? data.wards.map(w => {
                            console.log(`Processing ward: code=${w.code}, name="${w.name}"`);
                            return {
                                code: w.code, // Keep as number
                                name: w.name,
                                _debug: {
                                    originalData: w,
                                    allKeys: Object.keys(w)
                                }
                            };
                        }) : [];

                        console.log(`‚úÖ Processed ${wards.length} wards for district ${districtCode}`);
                        console.table(wards.slice(0, 5));

                        this.cache.set(cacheKey, wards);
                        return wards;
                    } catch (error) {
                        console.error(`‚ùå Error loading wards for district ${districtCode}:`, error);
                        console.error('Error details:', {
                            name: error.name,
                            message: error.message,
                            url: `${this.baseUrl}/d/${districtCode}?depth=2`
                        });
                        return [];
                    }
                }
            }

            const addressService = new ExternalAddressService();

            // Helper function to populate select dropdowns
            function populateSelect(selector, items, placeholder) {
                console.log(`üîß populateSelect called for ${selector} with ${items.length} items`);
                
                const select = $(selector);
                if (select.length === 0) {
                    console.error(`‚ùå Element not found: ${selector}`);
                    return;
                }
                
                // Clear existing options
                select.empty().append(`<option value="">${placeholder}</option>`);
                console.log(`üßπ Cleared ${selector} and added placeholder`);
                
                // Add new options
                let addedCount = 0;
                items.forEach((item, index) => {
                    if (!item.name || item.name.trim() === '') {
                        console.warn(`‚ö†Ô∏è Item ${index} has missing name:`, item);
                        return; // Skip items without names
                    }
                    
                    const option = $('<option></option>')
                        .attr('value', item.code)
                        .text(item.name);
                    select.append(option);
                    addedCount++;
                    
                    // Log first few items for debugging
                    if (index < 3) {
                        console.log(`üìù Added option: ${item.code} = "${item.name}"`);
                    }
                });
                
                console.log(`‚úÖ ${selector} populated with ${addedCount} options (${items.length - addedCount} skipped)`);
            }

            // Initialize address form
            async function initializeAddressForm() {
                console.log('üöÄ Initializing address form...');
                
                try {
                    console.log('üì° Fetching provinces from API...');
                    const provinces = await addressService.getProvinces();
                    
                    console.log(`üìä API Response - Received ${provinces.length} provinces`);
                    console.log('üîç First province (sample):', provinces[0]);
                    console.log('üìã All provinces data (full API response):');
                    console.table(provinces.slice(0, 10)); // Show first 10 in table format
                    console.log('üìÑ Complete provinces array:', provinces);
                    
                    if (provinces.length === 0) {
                        console.warn('‚ö†Ô∏è No provinces received from API');
                        $('#provinceSelect').empty().append('<option value="">-- Kh√¥ng c√≥ d·ªØ li·ªáu t·ªânh/th√†nh ph·ªë --</option>');
                        return;
                    }
                    
                    // Check for missing names with detailed logging
                    const missingNames = provinces.filter(p => !p.name || p.name.trim() === '');
                    if (missingNames.length > 0) {
                        console.warn(`‚ö†Ô∏è ${missingNames.length} provinces have missing names:`, missingNames);
                    }
                    
                    // Show detailed province info
                    console.group('üìä Province Data Analysis');
                    console.log('Total provinces:', provinces.length);
                    console.log('Provinces with names:', provinces.filter(p => p.name && p.name.trim()).length);
                    console.log('Sample province structures:');
                    provinces.slice(0, 3).forEach((province, index) => {
                        console.log(`Province ${index + 1}:`, {
                            code: province.code,
                            name: province.name,
                            allProperties: Object.keys(province)
                        });
                    });
                    console.groupEnd();
                    
                    console.log('üîß Populating province dropdown...');
                    populateSelect('#provinceSelect', provinces, '-- Ch·ªçn t·ªânh/th√†nh ph·ªë --');
                    $('#provinceSelect').prop('disabled', false);
                    
                    console.log('‚úÖ Province dropdown populated successfully');
                    
                } catch (error) {
                    console.error('‚ùå Failed to load provinces:', error);
                    console.error('Error details:', error.stack);
                    console.error('Full error object:', error);
                    
                    // Show user-friendly error
                    $('#provinceSelect').empty().append('<option value="">-- L·ªói t·∫£i d·ªØ li·ªáu t·ªânh/th√†nh ph·ªë --</option>');
                    
                    // Optional: Show detailed error to user in development
                    if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
                        alert(`L·ªói API: ${error.message}\n\nKi·ªÉm tra Console ƒë·ªÉ xem chi ti·∫øt.`);
                    } else {
                        alert('Kh√¥ng th·ªÉ t·∫£i danh s√°ch t·ªânh/th√†nh ph·ªë. Vui l√≤ng th·ª≠ l·∫°i sau.');
                    }
                }
            }

            // Event handlers for address dropdowns
            $('#provinceSelect').on('change', async function() {
                const provinceCode = $(this).val();
                const provinceText = $(this).find('option:selected').text();
                
                // Update hidden field and region
                $('#provinceName').val(provinceText);
                $('#State').val(getRegionFromProvince(provinceText));
                
                // Reset dependent dropdowns
                $('#districtSelect').empty().append('<option value="">-- Ch·ªçn qu·∫≠n/huy·ªán --</option>').prop('disabled', true);
                $('#wardSelect').empty().append('<option value="">-- Ch·ªçn ph∆∞·ªùng/x√£ --</option>').prop('disabled', true);
                $('#districtName').val('');
                $('#wardName').val('');
                
                if (provinceCode) {
                    try {
                        const districts = await addressService.getDistricts(provinceCode);
                        populateSelect('#districtSelect', districts, '-- Ch·ªçn qu·∫≠n/huy·ªán --');
                        $('#districtSelect').prop('disabled', false);
                    } catch (error) {
                        console.error('Failed to load districts:', error);
                        alert('Kh√¥ng th·ªÉ t·∫£i danh s√°ch qu·∫≠n/huy·ªán. Vui l√≤ng th·ª≠ l·∫°i.');
                    }
                }
            });

            $('#districtSelect').on('change', async function() {
                const districtCode = $(this).val();
                const districtText = $(this).find('option:selected').text();
                
                // Update hidden field
                $('#districtName').val(districtText);
                
                // Reset dependent dropdown
                $('#wardSelect').empty().append('<option value="">-- Ch·ªçn ph∆∞·ªùng/x√£ --</option>').prop('disabled', true);
                $('#wardName').val('');
                
                if (districtCode) {
                    try {
                        const wards = await addressService.getWards(districtCode);
                        populateSelect('#wardSelect', wards, '-- Ch·ªçn ph∆∞·ªùng/x√£ --');
                        $('#wardSelect').prop('disabled', false);
                    } catch (error) {
                        console.error('Failed to load wards:', error);
                        alert('Kh√¥ng th·ªÉ t·∫£i danh s√°ch ph∆∞·ªùng/x√£. Vui l√≤ng th·ª≠ l·∫°i.');
                    }
                }
            });

            $('#wardSelect').on('change', function() {
                const wardText = $(this).find('option:selected').text();
                $('#wardName').val(wardText);
            });

            // ===== ENHANCED MAP FUNCTIONALITY =====
            // Global variables for map
            let map;
            let currentMarker;
            let geocodingInProgress = false;

            // Initialize the Leaflet map
            function initializeMap() {
                // Default coordinates for Vietnam (Hanoi)
                const defaultLat = 21.0285;
                const defaultLng = 105.8542;
                
                // Get initial coordinates from form
                let initialLat = parseFloat($('#Latitude').val()) || defaultLat;
                let initialLng = parseFloat($('#Longitude').val()) || defaultLng;

                // Initialize map with container options to prevent overflow
                map = L.map('map', {
                    preferCanvas: false,
                    attributionControl: true,
                    zoomControl: true,
                    closePopupOnClick: true,
                    trackResize: true,
                    maxBounds: null,
                    maxBoundsViscosity: 1.0,
                    // Prevent map from expanding beyond container
                    maxZoom: 19,
                    minZoom: 5
                }).setView([initialLat, initialLng], 13);

                // Add OpenStreetMap tiles with proper sizing
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '¬© OpenStreetMap contributors',
                    maxZoom: 19,
                    subdomains: 'abc',
                    // Ensure tiles fit properly in container
                    tileSize: 256,
                    zoomOffset: 0
                }).addTo(map);

                // Force map to invalidate size multiple times to ensure proper fitting
                setTimeout(() => {
                    map.invalidateSize();
                    // Additional resize after container is fully rendered
                    setTimeout(() => {
                        map.invalidateSize();
                        // Fit map to container bounds
                        map.getContainer().style.height = '100%';
                        map.invalidateSize();
                    }, 200);
                }, 100);

                // Add initial marker if coordinates exist
                if ($('#Latitude').val() && $('#Longitude').val()) {
                    addMarker(initialLat, initialLng);
                }

                // Map click event with enhanced reverse geocoding
                map.on('click', function(e) {
                    const lat = e.latlng.lat;
                    const lng = e.latlng.lng;
                    addMarker(lat, lng);
                    updateCoordinates(lat, lng);
                    
                    // Show loading indicator for address lookup
                    showAddressDisplay('üîç ƒêang t√¨m ƒë·ªãa ch·ªâ...');
                    
                    // Perform enhanced reverse geocoding and auto-fill address
                    reverseGeocode(lat, lng);
                });

                // Ensure map stays in container on window resize
                $(window).on('resize', function() {
                    setTimeout(() => {
                        if (map) {
                            map.invalidateSize();
                        }
                    }, 100);
                });
            }

            // Add or update marker on map
            function addMarker(lat, lng, draggable = true) {
                // Remove existing marker
                if (currentMarker) {
                    map.removeLayer(currentMarker);
                }

                // Add new marker
                currentMarker = L.marker([lat, lng], {
                    draggable: draggable
                }).addTo(map);

                // Handle marker drag
                if (draggable) {
                    currentMarker.on('dragend', function(e) {
                        const newLat = e.target.getLatLng().lat;
                        const newLng = e.target.getLatLng().lng;
                        updateCoordinates(newLat, newLng);
                        
                        // Show loading indicator for address lookup
                        showAddressDisplay('üîç ƒêang c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ...');
                        
                        // Perform enhanced reverse geocoding and auto-fill address
                        reverseGeocode(newLat, newLng);
                    });
                }

                // Add popup
                currentMarker.bindPopup('<div class="map-marker-popup"><strong>V·ªã tr√≠ homestay</strong><br>K√©o th·∫£ ƒë·ªÉ ƒëi·ªÅu ch·ªânh</div>');
            }

            // Update coordinate input fields
            function updateCoordinates(lat, lng) {
                $('#Latitude').val(lat.toFixed(6));
                $('#Longitude').val(lng.toFixed(6));
            }

            // Enhanced reverse geocode using Enhanced Geocoding Service
            async function reverseGeocode(lat, lng) {
                console.log('üîç Starting enhanced reverse geocoding for:', lat, lng);
                console.log(`üåç Map click coordinates: Lat=${lat.toFixed(6)}, Lng=${lng.toFixed(6)}`);
                showAddressDisplay('üîç ƒêang t√¨m ƒë·ªãa ch·ªâ...');
                
                try {
                    const requestPayload = { latitude: lat, longitude: lng };
                    console.log('üì§ Sending request to Enhanced Geocoding Service:', requestPayload);
                    
                    const response = await fetch('/api/enhancedgeocoding/address', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(requestPayload)
                    });

                    console.log('üì° Enhanced reverse geocoding response status:', response.status, response.statusText);
                    console.log('üìÑ Response headers:', response.headers);
                    
                    const data = await response.json();
                    
                    // üéØ STORE ADDRESS COMPONENTS GLOBALLY FOR ENHANCED NOTIFICATIONS
                    window.lastAddressComponents = data;
                    
                    // üéØ HI·ªÇN TH·ªä TO√ÄN B·ªò D·ªÆ LI·ªÜU API RESPONSE
                    console.group('üìç FULL API RESPONSE - Enhanced Geocoding Service');
                    console.log('üîç Complete response object:', data);
                    console.log('üìä Response structure analysis:');
                    console.log('  - success:', data.success);
                    console.log('  - address:', data.address);
                    console.log('  - components:', data.components);
                    console.log('  - rawData:', data.rawData);
                    console.log('  - source:', data.source);
                    console.log('  - All response keys:', Object.keys(data));
                    
                    if (data.address) {
                        console.log('üìç FULL ADDRESS from API:', data.address);
                        console.log('üìè Address length:', data.address.length, 'characters');
                        console.log('üìã Address parts (split by comma):', data.address.split(','));
                    }
                    
                    if (data.components) {
                        console.log('üèóÔ∏è FULL COMPONENTS from API:');
                        console.table(data.components);
                        console.log('  - Component keys:', Object.keys(data.components));
                        Object.entries(data.components).forEach(([key, value]) => {
                            console.log(`  - ${key}: "${value}" (${typeof value})`);
                        });
                    }
                    
                    if (data.rawData) {
                        console.log('üîß RAW DATA from geocoding service:');
                        console.log(JSON.stringify(data.rawData, null, 2));
                        
                        // üéØ SPECIFIC FOCUS ON PROVINCE/CITY AND DISTRICT INFO WITH NEW MAPPING
                        if (data.rawData.address) {
                            console.group('üåç DETAILED LOCATION BREAKDOWN - New Custom Mapping');
                            const addr = data.rawData.address;
                            
                            console.log('üìã Raw Nominatim Fields Available:');
                            console.log(`  üõ£Ô∏è road: "${addr.road || 'N/A'}"`);
                            console.log(`  üè† house_number: "${addr.house_number || 'N/A'}"`);
                            console.log(`  üèòÔ∏è suburb: "${addr.suburb || 'N/A'}"`);
                            console.log(`  üè° village: "${addr.village || 'N/A'}"`);
                            console.log(`  üèõÔ∏è city: "${addr.city || 'N/A'}"`);
                            console.log(`  üìç county: "${addr.county || 'N/A'}"`);
                            console.log(`  üó∫Ô∏è state: "${addr.state || 'N/A'}"`);
                            
                            console.log('üéØ NEW CUSTOM MAPPING LOGIC:');
                            console.log('  üìç S·ªë nh√†: T·ª´ ƒë·∫ßu road ƒë·∫øn ch·ªØ "ƒë∆∞·ªùng"');
                            console.log('  üõ£Ô∏è T√™n ƒë∆∞·ªùng: T·ª´ ch·ªØ "ƒë∆∞·ªùng" tr·ªü ƒëi trong road');
                            console.log('  üèòÔ∏è Qu·∫≠n/Huy·ªán: suburb field');
                            console.log('  üè° X√£/Ph∆∞·ªùng: village field (optional)');
                            console.log('  üèõÔ∏è T·ªânh/TP: city field');
                            
                            if (data.components) {
                                console.log('‚úÖ PARSING RESULTS WITH NEW LOGIC:');
                                console.log(`  üè† S·ªë nh√†: "${data.components.houseNumber || 'N/A'}"`);
                                console.log(`  üõ£Ô∏è T√™n ƒë∆∞·ªùng: "${data.components.streetName || 'N/A'}"`);
                                console.log(`  üèòÔ∏è Qu·∫≠n/Huy·ªán: "${data.components.district || 'N/A'}" (from suburb)`);
                                console.log(`  üè° X√£/Ph∆∞·ªùng: "${data.components.ward || 'N/A'}" (from village)`);
                                console.log(`  üèõÔ∏è T·ªânh/TP: "${data.components.province || 'N/A'}" (from city)`);
                            }
                            
                            // Display complete address for reference
                            if (data.rawData.display_name) {
                                console.log('üìç COMPLETE DISPLAY NAME:', data.rawData.display_name);
                                console.log('üìè Total address length:', data.rawData.display_name.length, 'characters');
                            }
                            
                            console.groupEnd();
                        }
                    }
                    
                    console.log('üìä API Response Summary:');
                    console.log(`  - Source: ${data.source || 'Unknown'}`);
                    console.log(`  - Success: ${data.success}`);
                    console.log(`  - Has Address: ${!!data.address}`);
                    console.log(`  - Has Components: ${!!data.components}`);
                    console.log(`  - Has Raw Data: ${!!data.rawData}`);
                    console.groupEnd();

                    if (data.success && data.address) {
                        // üåü ENHANCED FULL ADDRESS DISPLAY WITH COMPLETE INFO
                        let fullAddressDisplay = '';
                        
                        // Try multiple sources for the most complete address
                        if (data.rawData && data.rawData.display_name) {
                            // Best case: we have raw data with display_name
                            fullAddressDisplay = `üìç COMPLETE ADDRESS: ${data.rawData.display_name}`;
                            console.log('‚ú® Using complete displayName from rawData:', data.rawData.display_name);
                        } else if (data.displayName && data.displayName.length > (data.address?.length || 0)) {
                            // Second best: displayName is longer than address
                            fullAddressDisplay = `üìç COMPLETE ADDRESS: ${data.displayName}`;
                            console.log('‚ú® Using displayName (more complete):', data.displayName);
                        } else if (data.address) {
                            // Fallback: use address field
                            fullAddressDisplay = `üìç FULL ADDRESS: ${data.address}`;
                            console.log('üìç Using address field:', data.address);
                        }
                        
                        // Enhanced address breakdown display
                        let addressBreakdown = '';
                        if (data.rawData && data.rawData.address) {
                            addressBreakdown += '<div class="mt-2 p-2 bg-light border rounded"><strong>üèóÔ∏è Address Breakdown:</strong><br>';
                            const addressDetails = data.rawData.address;
                            
                            // Show all available address components
                            Object.entries(addressDetails).forEach(([key, value]) => {
                                if (value && value.trim && value.trim()) {
                                    addressBreakdown += `<small><strong>${key}:</strong> ${value}</small><br>`;
                                }
                            });
                            addressBreakdown += '</div>';
                        } else if (data.displayName) {
                            // Fallback: show displayName as single field
                            addressBreakdown += '<div class="mt-2 p-2 bg-info text-white border rounded">';
                            addressBreakdown += '<strong>üìç Complete Address Available:</strong><br>';
                            addressBreakdown += `<small>${data.displayName}</small>`;
                            addressBreakdown += '</div>';
                        }
                        
                        showSuccessAddressDisplay(fullAddressDisplay + addressBreakdown);
                        
                        console.log('üè† Starting enhanced address parsing...');
                        console.log('üåü Full address for UI display:', fullAddressDisplay);
                        
                        // Use enhanced components if available
                        if (data.components) {
                            console.log('‚ú® Using enhanced address components:', data.components);
                            await parseEnhancedAddressComponents(data.components, data.address, data);
                        } else {
                            console.log('üìù Falling back to manual parsing');
                            // Use the most complete address available
                            const addressToUse = (data.rawData?.display_name) || data.displayName || data.address;
                            await parseAndFillAddress(addressToUse, data);
                        }
                    } else {
                        console.warn('‚ö†Ô∏è Enhanced reverse geocoding failed or no address returned:', data);
                        console.log('‚ùå Detailed error analysis:');
                        console.log('  - Response success:', data.success);
                        console.log('  - Has address field:', 'address' in data);
                        console.log('  - Address value:', data.address);
                        console.log('  - Error message:', data.message || 'No error message');
                        
                        showErrorAddressDisplay('‚ö†Ô∏è Kh√¥ng th·ªÉ t√¨m ƒë·ªãa ch·ªâ cho v·ªã tr√≠ n√†y');
                    }
                } catch (error) {
                    console.error('‚ùå Enhanced reverse geocoding error:', error);
                    console.error('‚ùå Error details:');
                    console.error('  - Error name:', error.name);
                    console.error('  - Error message:', error.message);
                    console.error('  - Error stack:', error.stack);
                    console.error('  - Request coordinates:', lat, lng);
                    
                    showErrorAddressDisplay('‚ùå L·ªói khi t√¨m ƒë·ªãa ch·ªâ. Vui l√≤ng nh·∫≠p th·ªß c√¥ng.');
                }
            }

            // Parse enhanced address components from Enhanced Geocoding Service
            async function parseEnhancedAddressComponents(components, fullAddress, enhancedData = null) {
                console.log('‚ú® Processing enhanced address components:', components);
                
                try {
                    // 1. Direct component mapping - more reliable than parsing
                    if (components.houseNumber && components.houseNumber.trim()) {
                        $('#houseNumber').val(components.houseNumber.trim());
                        console.log('üè† House number set:', components.houseNumber);
                        
                        // Visual feedback
                        $('#houseNumber').addClass('is-valid');
                        setTimeout(() => $('#houseNumber').removeClass('is-valid'), 2000);
                    }
                    
                    if (components.streetName && components.streetName.trim()) {
                        $('#Address').val(components.streetName.trim());
                        console.log('üõ£Ô∏è Street name set:', components.streetName);
                        
                        // Visual feedback
                        $('#Address').addClass('is-valid');
                        setTimeout(() => $('#Address').removeClass('is-valid'), 2000);
                    }
                    
                    // 2. Handle case where Enhanced service didn't extract house number properly
                    if (!components.houseNumber && fullAddress) {
                        console.log('üîß Enhanced service missing house number, trying fallback parsing...');
                        await parseAndFillAddress(fullAddress, enhancedData);
                        return; // Exit early, let parseAndFillAddress handle everything
                    }
                    
                    // 3. Administrative divisions with Enhanced data
                    if (components.province && components.province.trim()) {
                        console.log('üåç Attempting to match province:', components.province);
                        await matchAndSelectProvince(components.province.trim());
                    }
                    
                    // Show success notification with the most complete address data available
                    let notificationText = fullAddress;
                    if (enhancedData) {
                        if (enhancedData.rawData && enhancedData.rawData.display_name) {
                            notificationText = enhancedData.rawData.display_name;
                            console.log('üì¢ Using complete display name from rawData for enhanced notification:', notificationText);
                        } else if (enhancedData.displayName && enhancedData.displayName.length > (fullAddress?.length || 0)) {
                            notificationText = enhancedData.displayName;
                            console.log('üì¢ Using displayName (more complete) for enhanced notification:', notificationText);
                        }
                    }
                    showSuccessNotification('‚úÖ ƒê√£ t·ª± ƒë·ªông ƒëi·ªÅn ƒë·ªãa ch·ªâ t·ª´ b·∫£n ƒë·ªì!', notificationText);
                    console.log('‚úÖ Enhanced address parsing completed successfully');
                    
                } catch (error) {
                    console.error('‚ùå Error in enhanced address parsing:', error);
                    showErrorNotification('‚ö†Ô∏è Kh√¥ng th·ªÉ t·ª± ƒë·ªông ƒëi·ªÅn ƒë·ªãa ch·ªâ. Vui l√≤ng nh·∫≠p th·ªß c√¥ng.');
                }
            }

            // Enhanced province matching function
            async function matchAndSelectProvince(provinceName) {
                console.log('üîç Looking for province match:', provinceName);
                
                // Get current province list for matching
                const currentProvinces = Array.from($('#provinceSelect option')).map(option => ({
                    code: option.value,
                    name: option.text
                })).filter(p => p.code);

                // Enhanced province matching with Vietnamese patterns
                let matchedProvince = null;
                
                // Try exact match first
                matchedProvince = currentProvinces.find(p => 
                    provinceName.toLowerCase().trim() === p.name.toLowerCase().trim()
                );
                
                if (!matchedProvince) {
                    // Try partial match with common Vietnamese province formats
                    matchedProvince = currentProvinces.find(p => {
                        const cleanProvinceName = provinceName.toLowerCase()
                            .replace(/^(th√†nh ph·ªë|t·ªânh|tp\.?)\s*/i, '')
                            .replace(/\s*(city|province)$/i, '')
                            .trim();
                        
                        const cleanProvince = p.name.toLowerCase()
                            .replace(/^(th√†nh ph·ªë|t·ªânh|tp\.?)\s*/i, '')
                            .replace(/\s*(city|province)$/i, '')
                            .trim();
                        
                        return cleanProvinceName.includes(cleanProvince) || cleanProvince.includes(cleanProvinceName);
                    });
                }
                
                if (matchedProvince) {
                    console.log('‚úÖ Found province match:', matchedProvince.name);
                    $('#provinceSelect').val(matchedProvince.code).trigger('change');
                    $('#provinceName').val(matchedProvince.name);
                    
                    // Visual feedback
                    $('#provinceSelect').addClass('is-valid');
                    setTimeout(() => {
                        $('#provinceSelect').removeClass('is-valid');
                    }, 2500);
                    
                    console.log('üéØ Province auto-selected:', matchedProvince.name);
                } else {
                    console.log('‚ö†Ô∏è Could not auto-match province:', provinceName);
                }
            }

            // Parse reverse geocoded address and fill form fields (fallback method)
            async function parseAndFillAddress(fullAddress, enhancedData = null) {
                console.log('üè† Parsing address:', fullAddress);
                
                try {
                    // Parse the address to extract components
                    const addressParts = fullAddress.split(',').map(part => part.trim());
                    console.log('üìã Address parts:', addressParts);
                    
                    // Enhanced street address extraction with house number separation
                    if (addressParts.length > 0) {
                        let fullStreetAddress = addressParts[0]; // First part usually contains street info
                        console.log('üõ£Ô∏è Processing street address:', fullStreetAddress);
                        
                        // üîß ENHANCED PARSING FOR NOMINATIM FORMAT
                        // Nominatim often returns: "180, ƒê∆∞·ªùng ƒêi·ªán Bi√™n Ph·ªß" instead of "180 ƒê∆∞·ªùng ƒêi·ªán Bi√™n Ph·ªß"
                        
                        // Remove leading/trailing comma and normalize
                        fullStreetAddress = fullStreetAddress.replace(/^,+|,+$/g, '').trim();
                        
                        // Pattern 1: "123, Street Name" (Nominatim format)
                        let houseNumberMatch = fullStreetAddress.match(/^(\d+[a-zA-Z]?(?:\/\d+[a-zA-Z]?)?)\s*,\s*(.+)/);
                        
                        if (!houseNumberMatch) {
                            // Pattern 2: "123 Street Name" (Google format)
                            houseNumberMatch = fullStreetAddress.match(/^(\d+[a-zA-Z]?(?:\/\d+[a-zA-Z]?)?)\s+(.+)/);
                        }
                        
                        if (!houseNumberMatch) {
                            // Pattern 3: "S·ªë 123, Street Name" (Vietnamese format)
                            houseNumberMatch = fullStreetAddress.match(/^(?:S·ªë\s*)?(\d+[a-zA-Z]?(?:\/\d+[a-zA-Z]?)?)\s*,?\s*(.+)/i);
                        }
                        
                        if (houseNumberMatch) {
                            // Found house number pattern
                            const houseNumber = houseNumberMatch[1];
                            let streetName = houseNumberMatch[2].trim();
                            
                            // Clean street name (remove "ƒê∆∞·ªùng" prefix if present)
                            streetName = streetName.replace(/^(ƒê∆∞·ªùng|Street|Ph·ªë)\s+/i, '');
                            
                            console.log('‚úÖ Found house number:', houseNumber);
                            console.log('‚úÖ Found street name:', streetName);
                            
                            $('#houseNumber').val(houseNumber);
                            $('#Address').val(streetName);
                            
                            // Visual feedback
                            $('#houseNumber').addClass('is-valid');
                            $('#Address').addClass('is-valid');
                            setTimeout(() => {
                                $('#houseNumber').removeClass('is-valid');
                                $('#Address').removeClass('is-valid');
                            }, 2000);
                        } else {
                            console.log('‚ÑπÔ∏è No house number pattern found, checking alternative patterns...');
                            
                            // Try alternative patterns for edge cases
                            const alternativeMatch = fullStreetAddress.match(/^(.+?)\s+(\d+[a-zA-Z]?(?:\/\d+[a-zA-Z]?)?)$/);
                            if (alternativeMatch) {
                                // "Street Name 123" format
                                const streetPart = alternativeMatch[1].trim().replace(/^(ƒê∆∞·ªùng|Street|Ph·ªë)\s+/i, '');
                                const numberPart = alternativeMatch[2].trim();
                                
                                console.log('üìç Alternative pattern - Street:', streetPart, 'Number:', numberPart);
                                $('#Address').val(streetPart);
                                $('#houseNumber').val(numberPart);
                            } else {
                                // Just use as street name, clear house number
                                const cleanStreetName = fullStreetAddress.replace(/^(ƒê∆∞·ªùng|Street|Ph·ªë)\s+/i, '');
                                
                                console.log('üìç Using as street name only (detailed info):');
                                console.log('  üìÑ Full address received:', fullAddress);
                                console.log('  üõ£Ô∏è Full street address part:', fullStreetAddress);
                                console.log('  üßπ Clean street name:', cleanStreetName);
                                console.log('  üìã All address parts:', addressParts);
                                console.log('  üîç Patterns tried but not matched:');
                                console.log('    - Pattern 1 (Nominatim): /^(\\d+[a-zA-Z]?(?:\\/\\d+[a-zA-Z]?)?)\\s*,\\s*(.+)/');
                                console.log('    - Pattern 2 (Google): /^(\\d+[a-zA-Z]?(?:\\/\\d+[a-zA-Z]?)?)\\s+(.+)/');
                                console.log('    - Pattern 3 (Vietnamese): /^(?:S·ªë\\s*)?(\\d+[a-zA-Z]?(?:\\/\\d+[a-zA-Z]?)?)\\s*,?\\s*(.+)/i');
                                console.log('    - Alternative pattern: /^(.+?)\\s+(\\d+[a-zA-Z]?(?:\\/\\d+[a-zA-Z]?)?)$/');
                                console.log('  üí° Recommendation: Check if API format has changed');
                                
                                $('#Address').val(cleanStreetName);
                                $('#houseNumber').val('');
                            }
                            
                            // Visual feedback
                            $('#Address').addClass('is-valid');
                            setTimeout(() => {
                                $('#Address').removeClass('is-valid');
                            }, 2000);
                        }
                    }

                    // Show notification with the most complete address available
                    let notificationText = fullAddress;
                    if (enhancedData) {
                        // Try to get the most complete address
                        if (enhancedData.rawData && enhancedData.rawData.display_name) {
                            notificationText = enhancedData.rawData.display_name;
                            console.log('üì¢ Using complete display name from rawData for notification:', notificationText);
                        } else if (enhancedData.displayName && enhancedData.displayName.length > (fullAddress?.length || 0)) {
                            notificationText = enhancedData.displayName;
                            console.log('üì¢ Using displayName (more complete) for notification:', notificationText);
                        } else {
                            console.log('üì¢ Using fallback address for notification:', notificationText);
                        }
                    }
                    showSuccessNotification('‚úÖ ƒê√£ t·ª± ƒë·ªông ƒëi·ªÅn ƒë·ªãa ch·ªâ t·ª´ b·∫£n ƒë·ªì!', notificationText);
                    console.log('‚úÖ Address parsing completed successfully');
                    
                } catch (error) {
                    console.error('‚ùå Error parsing address:', error);
                    showErrorNotification('‚ö†Ô∏è Kh√¥ng th·ªÉ t·ª± ƒë·ªông ƒëi·ªÅn ƒë·ªãa ch·ªâ. Vui l√≤ng nh·∫≠p th·ªß c√¥ng.');
                }
            }

            // Enhanced address display functions
            function showAddressDisplay(text) {
                $('#displayText').text(text);
                $('#addressDisplay').removeClass('alert-danger alert-warning alert-success').addClass('alert-info').show();
            }

            function showSuccessAddressDisplay(text) {
                $('#displayText').html(text); // Use html() to allow formatting
                $('#addressDisplay').removeClass('alert-danger alert-info alert-warning').addClass('alert-success').show();
                
                // Also show in console for easy copying
                console.log('üéØ ADDRESS DISPLAY UPDATED:', text);
            }

            function showErrorAddressDisplay(text) {
                $('#displayText').text(text);
                $('#addressDisplay').removeClass('alert-success alert-info alert-warning').addClass('alert-danger').show();
            }

            // Show success notification with full address and detailed breakdown
            function showSuccessNotification(message, fullAddress = null, addressComponents = null) {
                let notificationContent = message;
                
                if (fullAddress) {
                    notificationContent += `<br><small class="text-muted"><strong>üìç ƒê·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß:</strong><br>${fullAddress}</small>`;
                    console.log('üìç FULL ADDRESS in notification:', fullAddress);
                    
                    // If we have access to address components, show key location info
                    if (window.lastAddressComponents && window.lastAddressComponents.rawData && window.lastAddressComponents.rawData.address) {
                        const addr = window.lastAddressComponents.rawData.address;
                        let locationInfo = '';
                        
                        // Show province/city
                        const province = addr.state || addr.province || addr.region || addr.city;
                        if (province) {
                            locationInfo += `<br><small class="text-info">üèõÔ∏è <strong>T·ªânh/Th√†nh:</strong> ${province}</small>`;
                        }
                        
                        // Show district
                        const district = addr.county || addr.state_district || addr.district || addr.administrative;
                        if (district) {
                            locationInfo += `<br><small class="text-info">üèòÔ∏è <strong>Qu·∫≠n/Huy·ªán:</strong> ${district}</small>`;
                        }
                        
                        // Show ward/commune
                        const ward = addr.suburb || addr.village || addr.town || addr.municipality || addr.quarter;
                        if (ward) {
                            locationInfo += `<br><small class="text-info">üè† <strong>Ph∆∞·ªùng/X√£:</strong> ${ward}</small>`;
                        }
                        
                        if (locationInfo) {
                            notificationContent += locationInfo;
                        }
                    }
                }
                
                const notification = $(`
                    <div class="alert alert-success alert-dismissible fade show position-fixed" 
                         style="top: 100px; right: 20px; z-index: 9999; min-width: 400px; max-width: 600px;">
                        ${notificationContent}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                `);
                $('body').append(notification);
                
                // Auto remove after 7 seconds (longer to read detailed address)
                setTimeout(() => {
                    notification.alert('close');
                }, 7000);
            }

            // Show error notification
            function showErrorNotification(message) {
                const notification = $(`
                    <div class="alert alert-warning alert-dismissible fade show position-fixed" 
                         style="top: 100px; right: 20px; z-index: 9999; min-width: 300px;">
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                `);
                $('body').append(notification);
                
                // Auto remove after 4 seconds
                setTimeout(() => {
                    notification.alert('close');
                }, 4000);
            }

            // Build full address including house number
            function buildFullAddress() {
                const houseNumber = $('#houseNumber').val();
                const streetName = $('#Address').val();
                const ward = $('#wardName').val();
                const district = $('#districtName').val();
                const province = $('#provinceName').val();
                
                const parts = [];
                
                // Combine house number and street name
                if (houseNumber && streetName) {
                    parts.push(`${houseNumber} ${streetName}`);
                } else if (streetName) {
                    parts.push(streetName);
                } else if (houseNumber) {
                    parts.push(houseNumber);
                }
                
                // Add other address parts
                if (ward) parts.push(ward);
                if (district) parts.push(district);
                if (province) parts.push(province);
                
                return parts.filter(part => part && part.trim()).join(', ');
            }

            // Enhanced auto-geocoding when address fields change
            $('#Address, #houseNumber, #wardSelect, #districtSelect, #provinceSelect').on('change blur', function() {
                // Debounce the geocoding to avoid too many requests
                clearTimeout(window.geocodeTimeout);
                window.geocodeTimeout = setTimeout(function() {
                    const address = buildFullAddress();
                    if (address.length > 10) { // Only geocode if we have a reasonable address
                        showAddressDisplay('üîç ƒêang t√¨m v·ªã tr√≠ cho ƒë·ªãa ch·ªâ...');
                        // geocodeAddress(); // Uncomment if forward geocoding is needed
                    }
                }, 1500); // Increased debounce time
            });

            // Initialize address form and map on page load
            initializeAddressForm();
            
            // Initialize map after a short delay to ensure DOM is ready
            setTimeout(() => {
                initializeMap();
            }, 500);
        });
    </script>
}

@section Styles {
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    
    <style>
        /* Map container styling to prevent overflow */
        .map-container {
            width: 100%;
            height: 400px;
            border: 2px solid #dee2e6;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 15px;
        }
        
        #map {
            width: 100%;
            height: 100%;
            border-radius: 6px;
        }
        
        /* Ensure Leaflet controls stay within bounds */
        .leaflet-container {
            max-width: 100%;
            max-height: 100%;
        }
        
        /* Style address display */
        #addressDisplay {
            margin-bottom: 15px;
            border-left: 4px solid #17a2b8;
        }
        
        /* Map button styling */
        .map-buttons {
            margin-bottom: 10px;
        }
        
        .map-buttons .btn {
            margin-right: 8px;
            margin-bottom: 5px;
        }
        
        /* Responsive map on smaller screens */
        @@media (max-width: 768px) {
            .map-container {
                height: 300px;
            }
        }
        
        /* Fix for map tiles loading issues */
        .leaflet-container .leaflet-tile {
            max-width: none !important;
            max-height: none !important;
        }
    </style>
}